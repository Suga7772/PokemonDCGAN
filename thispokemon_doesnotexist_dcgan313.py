{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":6226799,"sourceType":"datasetVersion","datasetId":3518282},{"sourceId":7340542,"sourceType":"datasetVersion","datasetId":2784626}],"dockerImageVersionId":30559,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:22.705949Z\",\"iopub.execute_input\":\"2025-03-21T10:34:22.706795Z\",\"iopub.status.idle\":\"2025-03-21T10:34:24.221760Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:22.706759Z\",\"shell.execute_reply\":\"2025-03-21T10:34:24.221080Z\"}}\nimport os\nimport torch\nimport torchvision\nimport cv2\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision.utils as vutils\nfrom torchvision.utils import make_grid,save_image\nfrom torchvision.datasets import ImageFolder\nfrom IPython.display import Image\nimport torchvision.transforms as tt\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid,save_image\n\n# %% [markdown]\n#   ##  Dataset Acquisition\n# \n# We will be using 2 datasets totalling 30000 images\n# \n# 1. **Pokemon_V2 Dataset (kaggle)**\n# \n#   9002 images from kaggle hub dataset (pokemon v2 , containing augmented images of original 813 images form v1 dataset)\n#   \n#   Link: https://www.kaggle.com/datasets/rajatvisitme/pokemon-image-dataset-v2\n# \n#   the original 813 images are acquired from https://veekun.com/dex/downloads\n# \n# 2. **Pokemon Generation One - 20,100 Gen 1 Pok√©mon (kaggle)**\n# \n#   20000 images being a combination of multiple existing datasets - All 151 Pokemon sorted by name\n# \n#   Link: https://www.kaggle.com/datasets/bhawks/pokemon-generation-one-22k/data\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:24.223231Z\",\"iopub.execute_input\":\"2025-03-21T10:34:24.223557Z\",\"iopub.status.idle\":\"2025-03-21T10:34:24.229982Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:24.223534Z\",\"shell.execute_reply\":\"2025-03-21T10:34:24.229041Z\"}}\ndataset1_path = \"/kaggle/input/pokemon-image-dataset-v2\"\ndataset2_path = \"/kaggle/input/pokemon-generation-one-22k\"\n\n# Verify paths\nprint(f\"Dataset 1 path: {dataset1_path}\")\nprint(f\"Dataset 2 path: {dataset2_path}\")\n\n# Check if paths exist\nif not os.path.exists(dataset1_path):\n    raise FileNotFoundError(f\"Dataset 1 path does not exist: {dataset1_path}\")\nif not os.path.exists(dataset2_path):\n    raise FileNotFoundError(f\"Dataset 2 path does not exist: {dataset2_path}\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:24.230905Z\",\"iopub.execute_input\":\"2025-03-21T10:34:24.231158Z\",\"iopub.status.idle\":\"2025-03-21T10:34:24.241978Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:24.231137Z\",\"shell.execute_reply\":\"2025-03-21T10:34:24.241120Z\"}}\n# Checkpoint directory\ncheckpoint_dir = \"/kaggle/working/checkpoints\"\nos.makedirs(checkpoint_dir, exist_ok=True)  #overrride creation if it doesnt exist\n\n# Image directory\nimage_dir = \"/kaggle/working/images\"\nos.makedirs(image_dir, exist_ok=True)  \n\n# Animation file\nanimation_file = \"/kaggle/working/animation.html\"\nos.makedirs(animation_file, exist_ok=True) \n\n# Define the directory path\nsave_dir = '/kaggle/working/models'\nos.makedirs(save_dir, exist_ok=True) \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:24.244223Z\",\"iopub.execute_input\":\"2025-03-21T10:34:24.244522Z\",\"iopub.status.idle\":\"2025-03-21T10:34:24.257402Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:24.244494Z\",\"shell.execute_reply\":\"2025-03-21T10:34:24.256635Z\"}}\nimage_size = 64\nbatch_size = 64\nstats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:24.258222Z\",\"iopub.execute_input\":\"2025-03-21T10:34:24.258462Z\",\"iopub.status.idle\":\"2025-03-21T10:34:28.557923Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:24.258443Z\",\"shell.execute_reply\":\"2025-03-21T10:34:28.557266Z\"}}\ntrain_dataset = ImageFolder(dataset1_path,transform=tt.Compose([\n    tt.Resize(image_size),\n    tt.CenterCrop(image_size),\n    tt.ToTensor(),\n    tt.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n    tt.RandomHorizontalFlip(p=0.5)\n]))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:28.558831Z\",\"iopub.execute_input\":\"2025-03-21T10:34:28.559051Z\",\"iopub.status.idle\":\"2025-03-21T10:34:28.563314Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:28.559033Z\",\"shell.execute_reply\":\"2025-03-21T10:34:28.562519Z\"}}\ntrain_dataloader = DataLoader(train_dataset,\n                              batch_size,\n                              shuffle=True,\n                              num_workers=3,\n                              pin_memory=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:28.564274Z\",\"iopub.execute_input\":\"2025-03-21T10:34:28.564564Z\",\"iopub.status.idle\":\"2025-03-21T10:34:28.573929Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:28.564536Z\",\"shell.execute_reply\":\"2025-03-21T10:34:28.573219Z\"}}\ndef denorm(img_tensors):\n    return img_tensors * stats[1][0] + stats[0][0]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:28.575187Z\",\"iopub.execute_input\":\"2025-03-21T10:34:28.576091Z\",\"iopub.status.idle\":\"2025-03-21T10:34:28.585393Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:28.576047Z\",\"shell.execute_reply\":\"2025-03-21T10:34:28.584646Z\"}}\ndef show_images(images, nmax=64):\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.set_xticks([]); ax.set_yticks([])\n    ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1, 2, 0))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:28.586337Z\",\"iopub.execute_input\":\"2025-03-21T10:34:28.586576Z\",\"iopub.status.idle\":\"2025-03-21T10:34:28.596987Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:28.586548Z\",\"shell.execute_reply\":\"2025-03-21T10:34:28.596340Z\"}}\ndef show_images_grid(dataloader, num_images=28):\n    # get batch of data\n    data_iter = iter(dataloader)\n    batch = next(data_iter)  # Get the batch (could be a tuple or list)\n    \n    # Unpack the batch (assuming it returns (images, labels))\n    if isinstance(batch, (list, tuple)):\n        images = batch[0]  # Extract images from the batch\n    else:\n        images = batch  # If batch is already a tensor, use it directly\n    \n    # Ensure we don't exceed the number of images in the batch\n    num_images = min(num_images, images.size(0))\n    \n    # Create a grid of images\n    grid = make_grid(images[:num_images], nrow=7, normalize=True, padding=2)\n    \n    # Convert the grid to a numpy array and change the order of dimensions\n    grid = grid.permute(1, 2, 0).cpu().numpy()  # Move to CPU and convert to NumPy\n    \n    # Display the grid using matplotlib\n    plt.figure(figsize=(16, 12))\n    plt.imshow(grid)\n    plt.axis('off')\n    plt.show()\n\n# %% [markdown]\n# ### preview of oringinal dataset that we are working with\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:28.599515Z\",\"iopub.execute_input\":\"2025-03-21T10:34:28.600042Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.691403Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:28.600020Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.690494Z\"}}\nshow_images_grid(train_dataloader)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.692643Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.692917Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.699476Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.692894Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.698630Z\"}}\ndef get_default_device():\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n\ndef to_device(data,device):\n    if isinstance(data,(list,tuple)):\n        return [to_device(x,device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self,dl,device):\n        self.dl = dl\n        self.device = device\n    def __iter__(self):\n        for b in self.dl:\n            yield to_device(b,device)\n    def __len__(self):\n        return len(self.dl)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.700639Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.700912Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.712902Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.700890Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.712025Z\"}}\ndevice = get_default_device()\ndevice\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.714103Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.714522Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.723653Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.714491Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.722767Z\"}}\ntrain_dataloader = DeviceDataLoader(train_dataloader, device)\n\n# %% [markdown]\n# ### Creating dcgan architecture\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.724582Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.724869Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.762968Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.724847Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.762169Z\"}}\ndiscriminator = nn.Sequential(\n    nn.Conv2d(3,64,kernel_size=4,stride=2,padding=1,bias=False),\n    nn.BatchNorm2d(64),\n    nn.LeakyReLU(0.2,inplace=True),\n    \n    nn.Conv2d(64,128,kernel_size=4,stride=2,padding=1,bias=False),\n    nn.BatchNorm2d(128),\n    nn.LeakyReLU(0.2,inplace=True),\n    \n    nn.Conv2d(128,256,kernel_size=4,stride=2,padding=1,bias=False),\n    nn.BatchNorm2d(256),\n    nn.LeakyReLU(0.2,inplace=True),\n    \n    nn.Conv2d(256,512,kernel_size=4,stride=2,padding=1,bias=False),\n    nn.BatchNorm2d(512),\n    nn.LeakyReLU(0.2,inplace=True),\n    \n    nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0, bias=False),\n    \n    nn.Flatten(),\n    nn.Sigmoid()\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.763910Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.764212Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.771897Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.764183Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.771172Z\"}}\ndiscriminator = to_device(discriminator,device)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.772956Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.773815Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.808592Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.773791Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.807779Z\"}}\nlatent_dim = 128\ngenerator = nn.Sequential(\n    nn.ConvTranspose2d(latent_dim,512,kernel_size=4,stride=1,padding=0,bias = False),\n    nn.BatchNorm2d(512),\n    nn.ReLU(True),\n    \n    nn.ConvTranspose2d(512,256,kernel_size=4,stride=2,padding=1,bias = False),\n    nn.BatchNorm2d(256),\n    nn.ReLU(True),\n    \n    nn.ConvTranspose2d(256,128,kernel_size=4,stride=2,padding=1,bias = False),\n    nn.BatchNorm2d(128),\n    nn.ReLU(True),\n    \n    nn.ConvTranspose2d(128,64,kernel_size=4,stride=2,padding=1,bias = False),\n    nn.BatchNorm2d(64),\n    nn.ReLU(True),\n    \n    nn.ConvTranspose2d(64,3,kernel_size=4,stride=2,padding=1,bias = False),\n    nn.Tanh()\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.809663Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.810260Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.817210Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.810231Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.816576Z\"}}\ngenerator = to_device(generator,device)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.818129Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.818368Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.825264Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.818349Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.824444Z\"}}\ndef train_discriminator(real_images, opt_d):\n    # Clear discriminator gradients\n    opt_d.zero_grad()\n\n    # Pass real images through discriminator\n    real_preds = discriminator(real_images)\n    real_targets = torch.ones(real_images.size(0), 1, device=device)\n    real_loss = F.binary_cross_entropy(real_preds, real_targets)\n    real_score = torch.mean(real_preds).item()\n    \n    # Generate fake images\n    latent = torch.randn(batch_size, latent_dim, 1, 1, device=device)\n    fake_images = generator(latent)\n\n    # Pass fake images through discriminator\n    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)\n    fake_preds = discriminator(fake_images)\n    fake_loss = F.binary_cross_entropy(fake_preds, fake_targets)\n    fake_score = torch.mean(fake_preds).item()\n\n    # Update discriminator weights\n    loss = real_loss + fake_loss\n    loss.backward()\n    opt_d.step()\n    return loss.item(), real_score, fake_score\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.826130Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.826396Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.841742Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.826376Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.840886Z\"}}\ndef train_generator(opt):\n    opt.zero_grad() # clearing gradietns\n    latent = torch.randn(batch_size,latent_dim,1,1,device=device)\n    fake_images = generator(latent)\n    preds = discriminator(fake_images)\n    targets = torch.ones(batch_size,1,device = device)\n    loss = F.binary_cross_entropy(preds,targets)\n    loss.backward()\n    opt.step()\n    return loss.item()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:34:29.842826Z\",\"iopub.execute_input\":\"2025-03-21T10:34:29.843251Z\",\"iopub.status.idle\":\"2025-03-21T10:34:29.853103Z\",\"shell.execute_reply.started\":\"2025-03-21T10:34:29.843222Z\",\"shell.execute_reply\":\"2025-03-21T10:34:29.852484Z\"}}\nfixed_latent = torch.randn(64, latent_dim, 1, 1, device=device)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:35:04.367693Z\",\"iopub.execute_input\":\"2025-03-21T10:35:04.368438Z\",\"iopub.status.idle\":\"2025-03-21T10:35:04.372990Z\",\"shell.execute_reply.started\":\"2025-03-21T10:35:04.368404Z\",\"shell.execute_reply\":\"2025-03-21T10:35:04.372006Z\"}}\ndef save_imagesSamp(index, latent_tensors):\n    fake_images = generator(latent_tensors)\n    fake_fname = 'generatedPokemon-images-{0:0=4d}.png'.format(index)\n    save_image(denorm(fake_images), os.path.join(image_dir, fake_fname), nrow=8)\n    print('Saving', fake_fname)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:35:04.375471Z\",\"iopub.execute_input\":\"2025-03-21T10:35:04.376125Z\",\"iopub.status.idle\":\"2025-03-21T10:35:04.618408Z\",\"shell.execute_reply.started\":\"2025-03-21T10:35:04.376078Z\",\"shell.execute_reply\":\"2025-03-21T10:35:04.617489Z\"}}\nsave_imagesSamp(0, fixed_latent)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:36:56.801529Z\",\"iopub.execute_input\":\"2025-03-21T10:36:56.801914Z\",\"iopub.status.idle\":\"2025-03-21T10:36:56.809300Z\",\"shell.execute_reply.started\":\"2025-03-21T10:36:56.801886Z\",\"shell.execute_reply\":\"2025-03-21T10:36:56.808383Z\"}}\ndef fit(epochs, lr, start_idx=1):\n    torch.cuda.empty_cache()   # clearing the cache for working prior gpu\n    \n    # Losses & scores to be stored in empty tuple lists\n    losses_g = []\n    losses_d = []\n    real_scores = []\n    fake_scores = []\n    \n    # Create optimizers enforced by adams optimisr, learning rate is 0.0002 for now , gives most stable training\n    opt_d = torch.optim.Adam(discriminator.parameters(), lr=lr, betas=(0.5, 0.999))\n    opt_g = torch.optim.Adam(generator.parameters(), lr=lr, betas=(0.5, 0.999))\n    \n    for epoch in range(epochs):\n        for real_images, _ in tqdm(train_dataloader):\n            # Train discriminator\n            loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)\n            # Train generator\n            loss_g = train_generator(opt_g)\n            \n        # Record losses & scores\n        losses_g.append(loss_g)\n        losses_d.append(loss_d)\n        real_scores.append(real_score)\n        fake_scores.append(fake_score)\n        \n        # Log losses & scores (last batch)\n        print(\"Epoch [{}/{}], loss_g: {:.4f}, loss_d: {:.4f}, real_score: {:.4f}, fake_score: {:.4f}\".format(\n            epoch+1, epochs, loss_g, loss_d, real_score, fake_score))\n    \n        # Save generated images\n        save_imagesSamp(epoch+start_idx, fixed_latent)\n    \n    return losses_g, losses_d, real_scores, fake_scores\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T10:36:56.810857Z\",\"iopub.execute_input\":\"2025-03-21T10:36:56.811271Z\",\"iopub.status.idle\":\"2025-03-21T12:01:51.189533Z\",\"shell.execute_reply.started\":\"2025-03-21T10:36:56.811249Z\",\"shell.execute_reply\":\"2025-03-21T12:01:51.188673Z\"}}\nlr = 0.0002 \nepochs = 350\nhistory = fit(epochs, lr)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:51.190956Z\",\"iopub.execute_input\":\"2025-03-21T12:01:51.191253Z\",\"iopub.status.idle\":\"2025-03-21T12:01:51.196035Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:51.191226Z\",\"shell.execute_reply\":\"2025-03-21T12:01:51.195135Z\"}}\nlosses_g, losses_d, real_scores, fake_scores = history\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:51.197212Z\",\"iopub.execute_input\":\"2025-03-21T12:01:51.197565Z\",\"iopub.status.idle\":\"2025-03-21T12:01:51.207093Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:51.197536Z\",\"shell.execute_reply\":\"2025-03-21T12:01:51.206463Z\"}}\n# Image('./generated/generated-images-0200.png')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:51.208805Z\",\"iopub.execute_input\":\"2025-03-21T12:01:51.209032Z\",\"iopub.status.idle\":\"2025-03-21T12:01:51.217599Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:51.209013Z\",\"shell.execute_reply\":\"2025-03-21T12:01:51.216743Z\"}}\n# Image('./generated/generated-images-0500.png')\n\n# %% [markdown]\n# ### Visualisations\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:51.218701Z\",\"iopub.execute_input\":\"2025-03-21T12:01:51.219278Z\",\"iopub.status.idle\":\"2025-03-21T12:01:51.527861Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:51.219249Z\",\"shell.execute_reply\":\"2025-03-21T12:01:51.527128Z\"}}\nplt.plot(losses_d, '-')\nplt.plot(losses_g, '-')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend(['Discriminator', 'Generator'])\nplt.title('Losses');\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:51.529014Z\",\"iopub.execute_input\":\"2025-03-21T12:01:51.529339Z\",\"iopub.status.idle\":\"2025-03-21T12:01:51.824545Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:51.529308Z\",\"shell.execute_reply\":\"2025-03-21T12:01:51.823739Z\"}}\nplt.plot(real_scores, '-')\nplt.plot(fake_scores, '-')\nplt.xlabel('epoch')\nplt.ylabel('score')\nplt.legend(['Real', 'Fake'])\nplt.title('Scores');\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:51.825504Z\",\"iopub.execute_input\":\"2025-03-21T12:01:51.825729Z\",\"iopub.status.idle\":\"2025-03-21T12:01:52.875428Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:51.825710Z\",\"shell.execute_reply\":\"2025-03-21T12:01:52.874539Z\"}}\nreal_images, _ = next(iter(train_dataloader))\n\nwith torch.no_grad():\n    latent = torch.randn(batch_size, latent_dim, 1, 1, device=device)\n    fake_images = generator(latent)\n\n# showcase the real image\nprint(\"Real Images\")\nshow_images(real_images.cpu())\n\n# compare with fake image\nprint(\"Fake Images\")\nshow_images(fake_images.cpu())\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-03-21T12:01:52.876689Z\",\"iopub.execute_input\":\"2025-03-21T12:01:52.876965Z\",\"iopub.status.idle\":\"2025-03-21T12:01:52.904535Z\",\"shell.execute_reply.started\":\"2025-03-21T12:01:52.876943Z\",\"shell.execute_reply\":\"2025-03-21T12:01:52.903889Z\"}}\ntorch.save(generator.state_dict(), os.path.join(save_dir, 'generator_pokemonDCGAN.pth'))\n\n# %% [markdown]\n# ### Deploying to a local \n\n# %% [code]\n","metadata":{"_uuid":"5d6eb605-f3b1-414d-ae92-b82d8b87315f","_cell_guid":"57e29d89-5287-45bc-bb1d-586381318cfc","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}